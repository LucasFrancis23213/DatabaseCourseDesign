CREATE OR REPLACE PROCEDURE CHECK_ITEMID(
    P_ITEM_ID IN NUMBER
) AS
    V_COUNT INTEGER;
BEGIN
    SELECT
        COUNT(*) INTO V_COUNT
    FROM
        FOUND_ITEMS
    WHERE
        ITEM_ID = P_ITEM_ID;
    IF V_COUNT = 0 THEN
        SELECT
            COUNT(*) INTO V_COUNT
        FROM
            LOST_ITEMS
        WHERE
            ITEM_ID = P_ITEM_ID;
    END IF;

    IF V_COUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'ItemID must exist in either FoundItems or LostItems.');
    END IF;
END;
/

CREATE TRIGGER Check_ItemID_Before_Insert_In_RewardOffers
BEFORE INSERT OR UPDATE ON REWARD_OFFERS
FOR EACH ROW
BEGIN
    Check_ItemID(:NEW.Item_ID);
END;
/

CREATE TRIGGER Check_ItemID_Before_Insert_In_ItemStatusHistory
BEFORE INSERT OR UPDATE ON ITEM_STATUS_HISTORY
FOR EACH ROW
BEGIN
    Check_ItemID(:NEW.Item_ID);
END;
/

CREATE TRIGGER Check_ItemID_Before_Insert_In_ItemTagLinks
BEFORE INSERT OR UPDATE ON ITEM_TAG_LINKS
FOR EACH ROW
BEGIN
    Check_ItemID(:NEW.Item_ID);
END;
/

CREATE TRIGGER Check_ItemID_Before_Insert_In_ItemImages
BEFORE INSERT OR UPDATE ON ITEM_IMAGES
FOR EACH ROW
BEGIN
    Check_ItemID(:NEW.Item_ID);
END;
/

CREATE TRIGGER Check_ItemID_Before_Insert_In_ItemClaimProcesses
BEFORE INSERT OR UPDATE ON ITEM_CLAIM_PROCESSES
FOR EACH ROW
BEGIN
    Check_ItemID(:NEW.ITEM_ID);
END;
/

CREATE TRIGGER Check_ItemID_Before_Insert_In_MatchRecords
BEFORE INSERT OR UPDATE ON MATCH_RECORDS
FOR EACH ROW
BEGIN
    Check_ItemID(:NEW.LOST_ITEM_ID);
    Check_ItemID(:NEW.FOUND_ITEM_ID);
END;
/

CREATE TRIGGER Check_ItemID_Before_Insert_In_ItemReturnAgreements
BEFORE INSERT OR UPDATE ON ITEM_RETURN_AGREEMENTS
FOR EACH ROW
BEGIN
    Check_ItemID(:NEW.ITEM_ID);
END;
/

CREATE TRIGGER Check_ItemID_Before_Insert_In_ItemComments
BEFORE INSERT OR UPDATE ON ITEM_COMMENTS
FOR EACH ROW
BEGIN
    Check_ItemID(:NEW.ITEM_ID);
END;
/

CREATE TRIGGER Check_ItemID_Before_Insert_In_Questions
BEFORE INSERT OR UPDATE ON QUESTIONS
FOR EACH ROW
BEGIN
    Check_ItemID(:NEW.ITEM_ID);
END;
/

CREATE TRIGGER Check_ItemID_Before_Insert_In_TransactionLogs
BEFORE INSERT OR UPDATE ON TRANSACTION_LOGS
FOR EACH ROW
BEGIN
    Check_ItemID(:NEW.ITEM_ID);
END;
/

CREATE TRIGGER Check_ItemID_Before_Insert_In_ReviewTransformation
BEFORE INSERT OR UPDATE ON REVIEW_TRANSFORMATION
FOR EACH ROW
BEGIN
    Check_ItemID(:NEW.ITEM_ID);
END;
/
